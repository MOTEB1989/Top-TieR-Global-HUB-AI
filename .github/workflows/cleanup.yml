name: Repository Hygiene - Close Old Issues & PRs

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  DB_URL: ${{ secrets.DB_URL }}
  OPENSEARCH_URL: ${{ secrets.OPENSEARCH_URL }}
  MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
  MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
  MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  NEO4J_URI: ${{ secrets.NEO4J_URI }}
  NEO4J_AUTH: ${{ secrets.NEO4J_AUTH }}
  CLICKHOUSE_URL: ${{ secrets.CLICKHOUSE_URL }}

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Execution mode (dry-run = ŸÑÿß Ÿäÿ∫ŸÑŸÇ ŸÅÿπŸÑŸäÿßŸãÿå execute = ÿ•ÿ∫ŸÑÿßŸÇ ÿ≠ŸÇŸäŸÇŸä)"
        required: true
        type: choice
        default: dry-run
        options:
          - dry-run
          - execute
      skip-issues:
        description: "ÿ™ÿÆÿ∑Ÿä ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸÄ Issues"
        required: false
        type: boolean
        default: false
      skip-prs:
        description: "ÿ™ÿÆÿ∑Ÿä ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸÄ Pull Requests"
        required: false
        type: boolean
        default: false
      before:
        description: "ÿ£ÿ∫ŸÑŸÇ ÿßŸÑÿπŸÜÿßÿµÿ± ÿßŸÑÿ£ŸÇÿØŸÖ ŸÖŸÜ Ÿáÿ∞ÿß ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ŸÅŸÇÿ∑ (YYYY-MM-DD)"
        required: false
        type: string
        default: ""
      exclude:
        description: "ÿ£ÿ±ŸÇÿßŸÖ Issues/PRs ŸÖŸÅÿµŸàŸÑÿ© ÿ®ŸÖÿ≥ÿßŸÅÿßÿ™ ŸÑÿßÿ≥ÿ™ÿ´ŸÜÿßÿ¶Ÿáÿß (ŸÖÿ´ÿßŸÑ: 123 456 789)"
        required: false
        type: string
        default: ""
      label-exclude:
        description: "ÿßÿ≥ÿ™ÿ´ŸÜÿßÿ° ÿßŸÑÿπŸÜÿßÿµÿ± ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ Ÿáÿ∞Ÿá ÿßŸÑÿ™ÿ≥ŸÖŸäÿßÿ™ (ŸÖŸÅÿµŸàŸÑÿ© ÿ®ŸÖÿ≥ÿßŸÅÿßÿ™)"
        required: false
        type: string
        default: "priority keep wontfix"
  
  schedule:
    # Run monthly on the 1st at 02:00 UTC (dry-run only for safety)
    - cron: '0 2 1 * *'

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Determine execution parameters
        id: params
        run: |
          # For scheduled runs, always use dry-run mode for safety
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "mode=dry-run" >> $GITHUB_OUTPUT
            echo "skip_issues=false" >> $GITHUB_OUTPUT
            echo "skip_prs=false" >> $GITHUB_OUTPUT
            echo "before=" >> $GITHUB_OUTPUT
            echo "exclude=" >> $GITHUB_OUTPUT
            echo "label_exclude=priority keep wontfix" >> $GITHUB_OUTPUT
          else
            # Manual dispatch - use input parameters
            echo "mode=${{ github.event.inputs.mode }}" >> $GITHUB_OUTPUT
            echo "skip_issues=${{ github.event.inputs.skip-issues }}" >> $GITHUB_OUTPUT
            echo "skip_prs=${{ github.event.inputs.skip-prs }}" >> $GITHUB_OUTPUT
            echo "before=${{ github.event.inputs.before }}" >> $GITHUB_OUTPUT
            echo "exclude=${{ github.event.inputs.exclude }}" >> $GITHUB_OUTPUT
            echo "label_exclude=${{ github.event.inputs.label-exclude }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build command arguments
        id: cmd
        run: |
          CMD="python scripts/close_github_items.py ${{ github.repository }} --yes"
          
          # Add dry-run flag if needed
          if [ "${{ steps.params.outputs.mode }}" = "dry-run" ]; then
            CMD="$CMD --dry-run"
          fi
          
          # Add skip options
          if [ "${{ steps.params.outputs.skip_issues }}" = "true" ]; then
            CMD="$CMD --skip-issues"
          fi
          if [ "${{ steps.params.outputs.skip_prs }}" = "true" ]; then
            CMD="$CMD --skip-prs"
          fi
          
          # Add date filter
          if [ -n "${{ steps.params.outputs.before }}" ]; then
            CMD="$CMD --before '${{ steps.params.outputs.before }}'"
          fi
          
          # Add exclusion lists
          if [ -n "${{ steps.params.outputs.exclude }}" ]; then
            for num in ${{ steps.params.outputs.exclude }}; do
              CMD="$CMD --exclude $num"
            done
          fi
          
          if [ -n "${{ steps.params.outputs.label_exclude }}" ]; then
            for label in ${{ steps.params.outputs.label_exclude }}; do
              CMD="$CMD --label-exclude '$label'"
            done
          fi
          
          echo "command=$CMD" >> $GITHUB_OUTPUT
          echo "Final command: $CMD"
      
      - name: Run cleanup script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üßπ Starting repository hygiene cleanup..."
          echo "Repository: ${{ github.repository }}"
          echo "Mode: ${{ steps.params.outputs.mode }}"
          echo "Event: ${{ github.event_name }}"
          
          ${{ steps.cmd.outputs.command }}
      
      - name: Post-cleanup summary
        if: always()
        run: |
          echo "‚úÖ Repository hygiene cleanup completed"
          echo "Mode: ${{ steps.params.outputs.mode }}"
          echo "Repository: ${{ github.repository }}"
          if [ "${{ steps.params.outputs.mode }}" = "dry-run" ]; then
            echo "‚ö†Ô∏è This was a DRY RUN - no actual changes were made"
          else
            echo "‚ú® Cleanup executed - check the log above for results"
          fi