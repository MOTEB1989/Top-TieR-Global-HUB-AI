name: Veritas Nexus • Health (Auto)

on:
  push:
    branches: [ main, develop ]
  pull_request:
  schedule:
    - cron: "*/30 * * * *"   # تلقائي كل 30 دقيقة (UTC)
  # لا تشغيل يدوي هنا (لا workflow_dispatch)، كل شيء تلقائي

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      # استهداف محلي (docker-compose) بشكل افتراضي
      CORE_URL: http://localhost:8080
      OSINT_URL: http://localhost:8081
      NEO4J_HTTP: http://localhost:7474
      NEO4J_USER: ${{ secrets.NEO4J_USER }}
      NEO4J_PASS: ${{ secrets.NEO4J_PASS }}
      # لو عندك فحص عبر Services داخل K8s، وفّرت kubeconfig كسِر
      KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq netcat-openbsd

      - name: Auto-select K8s Services if kubeconfig is provided
        if: ${{ env.KUBECONFIG_B64 != '' }}
        run: |
          echo "$KUBECONFIG_B64" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          # استهدف Services داخل الكلاستر بدل localhost
          echo "CORE_URL=http://veritas-core-svc"      >> $GITHUB_ENV
          echo "OSINT_URL=http://osint-engine-svc:8081" >> $GITHUB_ENV
          echo "NEO4J_HTTP=http://neo4j:7474"           >> $GITHUB_ENV

      - name: Set up environment for local Docker services
        if: ${{ env.KUBECONFIG_B64 == '' }}
        run: |
          # Create .env file from .env.example as base
          cp .env.example .env
          
          # Fix CORS environment variables for bash compatibility
          sed -i 's/CORS_ORIGINS=\[".*"\]/CORS_ORIGINS="http:\/\/localhost:3000,http:\/\/localhost:8080"/' .env
          sed -i 's/CORS_METHODS=\[".*"\]/CORS_METHODS="GET,POST,PUT,DELETE"/' .env
          sed -i 's/CORS_HEADERS=\[".*"\]/CORS_HEADERS="*"/' .env
          
          # Override environment-specific settings for CI
          echo "ENVIRONMENT=ci" >> .env
          echo "DEBUG=false" >> .env
          
          # Set up Neo4j credentials for CI
          echo "NEO4J_USER=neo4j" >> .env
          echo "NEO4J_PASSWORD=testpassword123" >> .env
          
          # Create Neo4j env file in expected location for docker-compose
          sudo mkdir -p /opt/veritas
          sudo tee /opt/veritas/.env.neo4j > /dev/null << EOF
          NEO4J_AUTH=neo4j/testpassword123
          NEO4J_AUTH_USER=neo4j
          NEO4J_AUTH_PASSWORD=testpassword123
          NEO4J_DATABASE=neo4j
          EOF
          
          echo "Environment configured for local Docker services"

      - name: Start Docker services
        if: ${{ env.KUBECONFIG_B64 == '' }}
        run: |
          set -a  # automatically export all variables
          source .env
          set +a
          
          echo "Starting core Docker Compose services..."
          # Start core services first
          docker compose up -d redis postgres neo4j
          
          echo "Waiting for core services to be ready..."
          sleep 60
          
          # Start main API service
          echo "Starting main API service..."
          docker compose up -d api
          
          # Start veritas-web service (with mini-web profile)
          echo "Starting veritas-web service..."
          docker compose --profile mini-web up -d veritas-web
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 60
          
          # Check service status
          echo "Current service status:"
          docker compose --profile mini-web ps

      - name: Wait for services to be healthy
        if: ${{ env.KUBECONFIG_B64 == '' }}
        run: |
          echo "Waiting for services to be healthy..."
          timeout=300
          interval=15
          elapsed=0
          
          # Check API service
          api_ready=false
          veritas_ready=false
          
          while [ $elapsed -lt $timeout ]; do
            # Check API service
            if [ "$api_ready" = false ] && curl -s --max-time 5 http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ API service is responding"
              api_ready=true
            fi
            
            # Check Veritas Web service
            if [ "$veritas_ready" = false ] && curl -s --max-time 5 http://localhost:8080/health > /dev/null 2>&1; then
              echo "✅ Veritas Web service is responding"
              veritas_ready=true
            fi
            
            # Both services ready?
            if [ "$api_ready" = true ] && [ "$veritas_ready" = true ]; then
              echo "✅ All services are ready"
              break
            fi
            
            echo "⏳ Waiting for services (${elapsed}s elapsed)... API: $api_ready, Veritas: $veritas_ready"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "❌ Timeout waiting for services to be healthy"
            echo "Service status:"
            docker compose --profile mini-web ps
            echo "API logs:"
            docker compose logs api --tail=20
            echo "Veritas-web logs:"
            docker compose logs veritas-web --tail=20
            exit 1
          fi

      - name: Show targets
        run: |
          echo "CORE_URL=$CORE_URL"
          echo "OSINT_URL=$OSINT_URL"
          echo "NEO4J_HTTP=$NEO4J_HTTP"

      - name: Make script executable
        run: chmod +x scripts/veritas_health_check.sh

      - name: Run health checks (with retry)
        id: runcheck
        run: |
          set -o pipefail
          attempt() {
            echo "== Veritas Health Check Attempt $1 ($(date -u +%FT%TZ)) =="
            ./scripts/veritas_health_check.sh
          }
          # محاولتان تلقائيًا لتجاوز أي تعثر مؤقت
          attempt 1 2>&1 | tee health.log || (sleep 10 && attempt 2 2>&1 | tee -a health.log)

      - name: Upload health log
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: veritas-health-log
          path: health.log
          retention-days: 7

      - name: Collect service logs on failure
        if: ${{ failure() && env.KUBECONFIG_B64 == '' }}
        run: |
          echo "=== Docker Compose Services Status ==="
          docker compose --profile mini-web ps
          
          echo "=== Service Logs ==="
          docker compose --profile mini-web logs --tail=50

      - name: Clean up Docker services
        if: ${{ always() && env.KUBECONFIG_B64 == '' }}
        run: |
          echo "Cleaning up Docker services..."
          docker compose --profile mini-web down -v --remove-orphans
          docker system prune -f --volumes

      - name: Job summary
        if: ${{ success() || failure() }}
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "### ✅ Health Check: **PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "- Core/OSINT/Neo4j جميعها تعمل." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Health Check: **FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "- راجع Artifact: **veritas-health-log**." >> $GITHUB_STEP_SUMMARY
          fi

      # فتح Issue تلقائي عند الفشل
      - name: Open Issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let tail = 'log unavailable';
            try {
              tail = fs.readFileSync('health.log','utf8').split('\n').slice(-120).join('\n');
            } catch(e) {}
            const title = `❌ Veritas Health Failed – ${new Date().toISOString()}`;
            const body = [
              'Health check failed.',
              `Run: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              `Commit: ${context.sha}`,
              '',
              '#### Tail of health.log',
              '```',
              tail,
              '```'
            ].join('\n');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['health-check','automation','bug']
            });

      # إغلاق أي Issues مفتوحة للصحة تلقائيًا عند النجاح
      - name: Auto-close health issues on success
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'health-check'
            });
            for (const i of issues) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: i.number,
                body: `✅ Health restored in run https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: i.number,
                state: 'closed'
              });
            }
