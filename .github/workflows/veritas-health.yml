name: Veritas Nexus • Health (Auto)

on:
  push:
    branches: [ main, develop ]
  pull_request:
  schedule:
    - cron: "*/30 * * * *"   # تلقائي كل 30 دقيقة (UTC)
  # لا تشغيل يدوي هنا (لا workflow_dispatch)، كل شيء تلقائي

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      # استهداف محلي (docker-compose) بشكل افتراضي
      CORE_URL: http://localhost:8080
      OSINT_URL: http://localhost:8081
      NEO4J_HTTP: http://localhost:7474
      NEO4J_USER: ${{ secrets.NEO4J_USER }}
      NEO4J_PASS: ${{ secrets.NEO4J_PASS }}
      # لو عندك فحص عبر Services داخل K8s، وفّرت kubeconfig كسِر
      KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq netcat-openbsd

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install aiofiles httpx cryptography neo4j redis

      - name: Auto-select K8s Services if kubeconfig is provided
        if: ${{ env.KUBECONFIG_B64 != '' }}
        run: |
          echo "$KUBECONFIG_B64" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          # استهدف Services داخل الكلاستر بدل localhost
          echo "CORE_URL=http://veritas-core-svc"      >> $GITHUB_ENV
          echo "OSINT_URL=http://osint-engine-svc:8081" >> $GITHUB_ENV
          echo "NEO4J_HTTP=http://neo4j:7474"           >> $GITHUB_ENV

      - name: Show targets
        run: |
          echo "CORE_URL=$CORE_URL"
          echo "OSINT_URL=$OSINT_URL"
          echo "NEO4J_HTTP=$NEO4J_HTTP"

      - name: Make script executable
        run: chmod +x scripts/veritas_health_check.sh

      - name: Start services for health check
        run: |
          # Start CORE_API in background
          echo "Starting CORE_API on port 8000..."
          python3 -c "from api_server import app; import uvicorn; uvicorn.run(app, host='0.0.0.0', port=8000)" &
          CORE_PID=$!
          echo "CORE_PID=$CORE_PID" >> $GITHUB_ENV
          
          # Start VERITAS_WEB in background  
          echo "Starting VERITAS_WEB on port 8080..."
          cd veritas-web && MINI_WEB_PORT=8080 python3 app.py &
          VERITAS_PID=$!
          echo "VERITAS_PID=$VERITAS_PID" >> $GITHUB_ENV
          cd ..
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 10
          
          # Verify services are running
          echo "Checking CORE_API..."
          curl -f "http://localhost:8000/health" || echo "CORE_API not ready yet"
          echo "Checking VERITAS_WEB..."
          curl -f "http://localhost:8080/health" || echo "VERITAS_WEB not ready yet"
          
          # Wait a bit more for full startup
          sleep 5

      - name: Run health checks (with retry)
        id: runcheck
        run: |
          set -o pipefail
          attempt() {
            echo "== Veritas Health Check Attempt $1 ($(date -u +%FT%TZ)) =="
            ./scripts/veritas_health_check.sh
          }
          # محاولتان تلقائيًا لتجاوز أي تعثر مؤقت
          attempt 1 2>&1 | tee health.log || (sleep 10 && attempt 2 2>&1 | tee -a health.log)

      - name: Cleanup services
        if: always()
        run: |
          echo "Stopping services..."
          if [ -n "$CORE_PID" ]; then
            kill $CORE_PID || true
          fi
          if [ -n "$VERITAS_PID" ]; then
            kill $VERITAS_PID || true
          fi
          # Kill any remaining uvicorn processes
          pkill -f uvicorn || true
          sleep 2

      - name: Upload health log
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: veritas-health-log
          path: health.log
          retention-days: 7

      - name: Job summary
        if: ${{ success() || failure() }}
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "### ✅ Health Check: **PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "- Core/OSINT/Neo4j جميعها تعمل." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Health Check: **FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "- راجع Artifact: **veritas-health-log**." >> $GITHUB_STEP_SUMMARY
          fi

      # فتح Issue تلقائي عند الفشل
      - name: Open Issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let tail = 'log unavailable';
            try {
              tail = fs.readFileSync('health.log','utf8').split('\n').slice(-120).join('\n');
            } catch(e) {}
            const title = `❌ Veritas Health Failed – ${new Date().toISOString()}`;
            const body = [
              'Health check failed.',
              `Run: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              `Commit: ${context.sha}`,
              '',
              '#### Tail of health.log',
              '```',
              tail,
              '```'
            ].join('\n');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['health-check','automation','bug']
            });

      # إغلاق أي Issues مفتوحة للصحة تلقائيًا عند النجاح
      - name: Auto-close health issues on success
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'health-check'
            });
            for (const i of issues) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: i.number,
                body: `✅ Health restored in run https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: i.number,
                state: 'closed'
              });
            }
