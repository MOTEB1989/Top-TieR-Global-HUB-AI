name: Auto-merge PRs

'on':
  pull_request:
    types: [opened, synchronize, labeled, unlabeled, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Check if PR should be auto-merged
        id: check-automerge
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Skip if no PR context
            if (!pr) {
              console.log('No PR context available');
              return false;
            }
            
            console.log(`Checking PR #${pr.number} by ${pr.user.login}`);
            
            // Get PR details including labels
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const labels = pullRequest.labels.map(label => label.name);
            console.log('PR labels:', labels);
            
            // Check if PR has auto-merge label
            const hasAutoMergeLabel = labels.some(label => 
              ['auto-merge', 'ready-to-merge', 'automerge'].includes(label.toLowerCase())
            );
            
            if (!hasAutoMergeLabel) {
              console.log('PR does not have auto-merge label');
              return false;
            }
            
            // Check if author is authorized (owner, collaborator, or specified users)
            const authorizedUsers = ['MOTEB1989']; // Repository owner
            const isAuthorized = authorizedUsers.includes(pr.user.login);
            
            // Check if user is a collaborator
            let isCollaborator = false;
            try {
              await github.rest.repos.checkCollaborator({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: pr.user.login
              });
              isCollaborator = true;
            } catch (error) {
              isCollaborator = false;
            }
            
            if (!isAuthorized && !isCollaborator) {
              console.log(`User ${pr.user.login} is not authorized for auto-merge`);
              return false;
            }
            
            // Check if all checks are passing
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            const failedChecks = checkRuns.check_runs.filter(check => 
              check.status === 'completed' && check.conclusion !== 'success'
            );
            
            if (failedChecks.length > 0) {
              console.log('Some checks are failing:', failedChecks.map(c => c.name));
              return false;
            }
            
            // Check for required reviews (if any)
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const approvedReviews = reviews.filter(review => review.state === 'APPROVED');
            const requestedChanges = reviews.filter(review => review.state === 'CHANGES_REQUESTED');
            
            if (requestedChanges.length > 0) {
              console.log('PR has requested changes');
              return false;
            }
            
            // Check if PR is mergeable (no conflicts)
            if (pullRequest.mergeable === false) {
              console.log('PR has merge conflicts');
              return false;
            }
            
            console.log('All conditions met for auto-merge');
            return true;

      - name: Enable auto-merge
        if: steps.check-automerge.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            try {
              // Determine merge method based on labels
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              const labels = pullRequest.labels.map(label => label.name.toLowerCase());
              let mergeMethod = 'merge'; // default
              
              if (labels.includes('squash-merge') || labels.includes('squash')) {
                mergeMethod = 'squash';
              } else if (labels.includes('rebase-merge') || labels.includes('rebase')) {
                mergeMethod = 'rebase';
              }
              
              console.log(`Enabling auto-merge with method: ${mergeMethod}`);
              
              await github.rest.pulls.enableAutoMerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: mergeMethod
              });
              
              // Add comment to PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `ü§ñ Auto-merge enabled using **${mergeMethod}** method.\n\nThis PR will be automatically merged when all conditions are met:\n- ‚úÖ All checks passing\n- ‚úÖ No merge conflicts\n- ‚úÖ No pending change requests\n- ‚úÖ Authorized by: ${pr.user.login}`
              });
              
            } catch (error) {
              console.error('Failed to enable auto-merge:', error);
              
              // Try manual merge as fallback
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  merge_method: mergeMethod
                });
                
                console.log('Successfully merged PR manually');
              } catch (mergeError) {
                console.error('Manual merge also failed:', mergeError);
                throw mergeError;
              }
            }

      - name: Comment on failure
        if: failure() && steps.check-automerge.outputs.result == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) return;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `‚ùå Auto-merge conditions not met for PR #${pr.number}.\n\nPlease ensure:\n- PR has \`auto-merge\` label\n- Author is authorized (repository owner or collaborator)\n- All CI checks are passing\n- No merge conflicts exist\n- No change requests pending`
            });