---
name: Post-merge Validation (Readonly)
"on":
  push:
    branches: [main]
  workflow_dispatch:
permissions:
  contents: read
concurrency:
  group: post-merge-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      CORE_URL: http://localhost:8080
      OSINT_URL: http://localhost:8081
      NEO4J_HTTP: http://localhost:7474
      NEO4J_USER: ${{ secrets.NEO4J_USER }}
      NEO4J_PASS: ${{ secrets.NEO4J_PASS }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      SAFE_MODE: "1"
      DRY_RUN: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Boot minimal stack (core + osint + neo4j) if docker compose exists
        if: ${{ hashFiles('docker-compose.yml','docker-compose.yaml','compose.yaml','compose.yml') != '' }}
        run: |
          docker compose up -d
          # give services a short warm-up
          sleep 10

      - name: Verify OpenAI key (ping /v1/models)
        if: ${{ secrets.OPENAI_API_KEY != '' }}
        run: |
          python3 - <<'PY'
          import os, urllib.request
          key=os.getenv("OPENAI_API_KEY")
          if not key:
            raise SystemExit("OPENAI_API_KEY missing")
          req=urllib.request.Request(
            "https://api.openai.com/v1/models",
            headers={"Authorization":f"Bearer {key}"}
          )
          with urllib.request.urlopen(req, timeout=10) as r:
            print("OPENAI: OK", r.status)
          PY

      - name: Readonly smoke (if script present)
        if: ${{ hashFiles('scripts/safe_smoke.sh') != '' }}
        run: |
          chmod +x scripts/safe_smoke.sh
          ./scripts/safe_smoke.sh | tee safe_smoke.log

      - uses: actions/upload-artifact@v4
        if: ${{ (success() || failure()) && hashFiles('scripts/safe_smoke.sh') != '' }}
        with:
          name: post-merge-smoke
          path: safe_smoke.log
          retention-days: 7

        # Optional Slack alert (set secret SLACK_WEBHOOK_URL)
        # - name: Notify Slack on failure
        #   if: failure() && secrets.SLACK_WEBHOOK_URL != ''
        #   run: |
        #     curl -X POST -H 'Content-type: application/json' \
        #       --data "{\"text\":\"Post-merge failed on $GITHUB_SHA. See artifacts.\"}" \
        #       ${{ secrets.SLACK_WEBHOOK_URL }}
