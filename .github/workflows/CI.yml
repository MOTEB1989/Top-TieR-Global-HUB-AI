---
name: CI

'on':
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  schedule:
    - cron: "0 6 * * 1"   # كل اثنين 06:00 UTC
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_ORG_ID: ${{ secrets.OPENAI_ORG_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      - name: Fail-fast Python syntax
        run: |
          python -m py_compile $(git ls-files '*.py') || exit 1
          python - << 'PY'
          import sys, tokenize, os
          p='veritas_console.py'
          if os.path.exists(p):
            try:
              with open(p,'rb') as f:
                for _ in tokenize.tokenize(f.readline): pass
              print('OK:', p)
            except tokenize.TokenError as e:
              print('TokenError in', p, ':', e); sys.exit(1)
          PY

      - name: Install linters
        run: |
          pip install yamllint
          sudo curl -sL https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 \
            -o /usr/local/bin/hadolint
          sudo chmod +x /usr/local/bin/hadolint

      - name: Lint YAML
        run: yamllint -s .

      - name: Lint Dockerfiles
        run: |
          find . -name 'Dockerfile*' -maxdepth 4 -print0 | xargs -0 -I{} hadolint {}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Verify Buildx
        run: |
          docker buildx version
          docker buildx inspect --bootstrap

      - name: Build image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: local/veritas-gateway:test

      - name: Start services (Compose)
        run: docker compose up -d
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_ORG_ID: ${{ secrets.OPENAI_ORG_ID }}

      - name: Wait for services to be healthy
        run: |
          for i in {1..20}; do
            core_ok=$(curl -sf http://localhost:8000/health || echo fail)
            web_ok=$(curl -sf http://localhost:3000 || echo fail)
            if [[ "$core_ok" != "fail" && "$web_ok" != "fail" ]]; then
              echo "✅ Both services are healthy."
              exit 0
            fi
            echo "⏳ Waiting for services... ($i/20)"
            sleep 5
          done
          echo "❌ ERROR: Services did not become healthy in time."
          docker compose logs
          exit 1

      - name: Smoke test API health
        run: curl -sSf http://localhost:8000/health

      - name: Smoke test web health
        run: curl -sSf http://localhost:3000/health

      - name: Stop services
        if: always()
        run: docker compose down -v

  push-image:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Warn when Docker Hub credentials are missing
        if: ${{ secrets.DOCKER_USERNAME == '' || secrets.DOCKER_PASSWORD == '' }}
        run: |
          echo "Docker push skipped: configure DOCKER_USERNAME and DOCKER_PASSWORD secrets to enable publishing." >&2

      - uses: actions/checkout@v4
        if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}

      - uses: docker/setup-buildx-action@v3
        if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}

      - name: Docker login
        if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push gateway
        if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: docker.io/${{ secrets.DOCKER_USERNAME }}/veritas-gateway:ci-${{ github.sha }}

  notify:
    needs: [build-test, push-image]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Warn when Slack webhook is missing
        if: ${{ secrets.SLACK_WEBHOOK_URL == '' }}
        run: |
          echo "Slack notification skipped: configure SLACK_WEBHOOK_URL to enable alerts." >&2

      - name: Slack notify
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: >-
            CI • ref=${{ github.ref }} • build=${{ needs.build-test.result }} • push=
            ${{ needs.push-image.result || 'skipped' }}
