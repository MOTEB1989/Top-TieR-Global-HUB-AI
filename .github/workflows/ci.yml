name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install requirements
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint (ruff)
        run: |
          pip install ruff
          ruff check .

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do pg_isready -h localhost -p 5432 && break || sleep 1; done
        env:
          PGPASSWORD: postgres

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pip install pytest
          pytest -q

      - name: Alembic upgrade
        run: |
          pip install alembic
          alembic upgrade head || true

      - name: LLM PR review (non-blocking)
        uses: actions/github-script@v6
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            const pr = github.context.payload.pull_request;
            if (!pr) {
              console.log('No pull_request context, skipping LLM review.');
              return;
            }
            const filesResp = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });
            const files = filesResp.data;
            let diffText = files.map(f => `File: ${f.filename}\nPatch:\n${f.patch||''}`).join('\n\n');
            const prompt = `You are a concise GitHub reviewer. Summarize potential issues and suggestions for the following PR. Be brief and list up to 5 items.\n\n${diffText}`;
            const resp = await fetch('https://api.openai.com/v1/chat/completions', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${process.env.OPENAI_API_KEY}` },
              body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 600
              })
            });
            const body = await resp.json();
            const summary = (body.choices && body.choices[0] && body.choices[0].message && body.choices[0].message.content) || JSON.stringify(body);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `Automated LLM review (non-blocking):\n\n${summary}`
            });