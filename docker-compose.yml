---
services:
  # Main API service
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - ENVIRONMENT=development
    depends_on:
      - redis
      - postgres
    volumes:
      - .:/app

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  # PostgreSQL for data storage
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=app_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Neo4j graph database for OSINT data
  neo4j:
    image: neo4j:5
    ports:
      - "7474:7474"
      - "7687:7687"
    env_file:
      - /opt/veritas/.env.neo4j
    environment:
      - NEO4J_dbms_security_auth__enabled=true
      - NEO4J_AUTH=${NEO4J_USER}:${NEO4J_PASSWORD}
    volumes:
      - neo4j-data:/data

  # Veritas Mini-Web Service (Optional - enable manually)
  veritas-web:
    build: ./veritas-web
    ports:
      - "8080:8080"
    env_file:
      - /opt/veritas/.env.neo4j
    environment:
      - NODE_ENV=production
    depends_on:
      neo4j:
        condition: service_started
    profiles:
      - mini-web  # Optional profile - start with: docker compose --profile mini-web up

volumes:
  postgres_data:
  neo4j-data:

networks:
  default:
    name: top-tier-hub-network
