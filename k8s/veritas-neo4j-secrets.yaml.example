# Veritas Neo4j Secrets Configuration
#
# IMPORTANT: This is an example file. DO NOT commit actual secrets to Git!
#
# To create the secret in your Kubernetes cluster, follow these steps:
#
# 1. Copy this file to create your actual secret:
#    cp veritas-neo4j-secrets.yaml.example veritas-neo4j-secrets.yaml
#
# 2. Edit the values in veritas-neo4j-secrets.yaml with your actual credentials:
#    - Replace "neo4j" with your desired username (if different)
#    - Replace "your-secure-password-here" with a strong password
#    - Generate a strong password with: openssl rand -base64 32
#
# 3. Create the secret in Kubernetes:
#    kubectl apply -f veritas-neo4j-secrets.yaml
#
# 4. Verify the secret was created:
#    kubectl get secret veritas-neo4j-secrets
#
# 5. Delete the local file for security:
#    rm veritas-neo4j-secrets.yaml
#
# Alternative: Create secret directly via kubectl (recommended for production):
# kubectl create secret generic veritas-neo4j-secrets \
#   --from-literal=NEO4J_USER=neo4j \
#   --from-literal=NEO4J_PASSWORD=your-secure-password-here
#
---
apiVersion: v1
kind: Secret
metadata:
  name: veritas-neo4j-secrets
  labels:
    app: neo4j
    component: database
type: Opaque
stringData:
  # Neo4j username (typically 'neo4j' for default installation)
  NEO4J_USER: "neo4j"
  # Neo4j password - CHANGE THIS to a secure password!
  # Generate with: openssl rand -base64 32
  NEO4J_PASSWORD: "your-secure-password-here"
