openapi: 3.1.0
info:
  title: GitHub Repository Integration
  description: Actions schema to read/manage issues, PRs, and files across GitHub repositories.
  version: 1.0.0
servers:
  - url: https://api.github.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: PAT
security:
  - bearerAuth: []
paths:
  /repos/{owner}/{repo}/issues:
    get:
      operationId: listIssues
      summary: List issues
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
          example: MOTEB1989
        - name: repo
          in: path
          required: true
          schema: { type: string }
          example: Top-TieR-Global-HUB-AI
        - name: state
          in: query
          schema: { type: string, enum: [open, closed, all], default: open }
        - name: per_page
          in: query
          schema: { type: integer, default: 30, minimum: 1, maximum: 100 }
        - name: page
          in: query
          schema: { type: integer, default: 1, minimum: 1 }
      responses:
        "200":
          description: Issues list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    number: { type: integer }
                    title: { type: string }
                    state: { type: string }
                    html_url: { type: string }
                    pull_request:
                      type: object
                      nullable: true
    post:
      operationId: createIssue
      summary: Create an issue
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title: { type: string }
                body: { type: string }
                labels:
                  type: array
                  items: { type: string }
      responses:
        "201":
          description: Issue created

  /repos/{owner}/{repo}/issues/{issue_number}:
    patch:
      operationId: updateIssue
      summary: Update/close an issue
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: issue_number
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  enum: [open, closed]
                title:
                  type: string
                body:
                  type: string
      responses:
        "200":
          description: Issue updated

  /repos/{owner}/{repo}/issues/{issue_number}/comments:
    post:
      operationId: commentIssue
      summary: Add a comment to an issue
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: issue_number
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [body]
              properties:
                body: { type: string }
      responses:
        "201":
          description: Comment created

  /repos/{owner}/{repo}/pulls:
    get:
      operationId: listPulls
      summary: List pull requests
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: state
          in: query
          schema: { type: string, enum: [open, closed, all], default: open }
        - name: per_page
          in: query
          schema: { type: integer, default: 30, minimum: 1, maximum: 100 }
        - name: page
          in: query
          schema: { type: integer, default: 1, minimum: 1 }
      responses:
        "200":
          description: Pull requests list

    post:
      operationId: createPull
      summary: Create a pull request
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, head, base]
              properties:
                title: { type: string }
                head: { type: string, description: "Branch with your changes." }
                base: { type: string, description: "Target branch to merge into." }
                body: { type: string }
                draft: { type: boolean, default: false }
      responses:
        "201":
          description: Pull request created

  /repos/{owner}/{repo}/contents/{path}:
    get:
      operationId: getFile
      summary: Get file contents (Base64)
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: path
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: File contents
          content:
            application/json:
              schema:
                type: object
                properties:
                  name: { type: string }
                  path: { type: string }
                  sha: { type: string }
                  content: { type: string, description: "Base64-encoded content" }
                  encoding: { type: string }

    put:
      operationId: putFile
      summary: Create or update a file
      description: For updates, include the current file SHA from a prior GET.
      parameters:
        - name: owner
          in: path
          required: true
          schema: { type: string }
        - name: repo
          in: path
          required: true
          schema: { type: string }
        - name: path
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message, content]
              properties:
                message: { type: string, description: "Commit message" }
                content: { type: string, description: "Base64-encoded file content" }
                sha: { type: string, description: "SHA of the file being replaced" }
                branch: { type: string, description: "Target branch" }
                committer:
                  type: object
                  properties:
                    name: { type: string }
                    email: { type: string }
                author:
                  type: object
                  properties:
                    name: { type: string }
                    email: { type: string }
      responses:
        "201":
          description: File created
        "200":
          description: File updated
